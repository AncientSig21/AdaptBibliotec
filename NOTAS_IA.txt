# =============================================
# ANOTACIONES DE CAMBIOS REALIZADOS POR IA
# =============================================
# Fecha: [Completar con la fecha actual al guardar]
#
# 1. Problema detectado: El sistema de autenticación no estaba configurado correctamente.
#    Motivo: Faltaban las variables de entorno necesarias para Supabase.
#    Archivos involucrados: src/supabase/client.ts, src/hooks/useAuth.ts, env.example
#    Solución:
#      - Se recomendó crear un archivo .env en la raíz del proyecto.
#      - Se indicó copiar el contenido de env.example a .env y asegurarse de que las claves sean correctas.
#      - Se sugirió reiniciar el servidor de desarrollo tras agregar el archivo .env.
#
# Todas las futuras modificaciones y sus motivos se documentarán aquí, siempre en formato de comentario para evitar errores de ejecución.
# =============================================

# =============================================
# Fecha: [Completar con la fecha actual al guardar]
#
# 2. Se modificó el archivo src/pages/AdminDashboard.tsx para que muestre el número real de libros almacenados en la base de datos Supabase.
#    - Se agregó un useEffect que consulta la cantidad de libros usando supabase.from('Libros').select('*', { count: 'exact', head: true })
#    - El valor se muestra dinámicamente en el panel de "Libros Totales".
#    - Si hay error, se muestra "Error"; si está cargando, se muestra "...".
#    - Motivo: Mostrar información real y actualizada al administrador.
# =============================================

# =============================================
# Fecha: [Completar con la fecha actual al guardar]
#
# 3. Corrección en src/pages/AdminDashboard.tsx:
#    - Se volvió a usar 'Libros' (con mayúscula) en la consulta a Supabase.
#    - Motivo: El cliente tipado de Supabase espera el nombre de la tabla exactamente como está definido en los tipos generados, lo que evita errores de compilación y asegura la consulta correcta.
# ============================================= 

# =============================================
# Fecha: [Completar con la fecha actual al guardar]
#
# 4. Se restauró el código en src/pages/AdminDashboard.tsx para consultar y mostrar el número real de libros desde Supabase.
#    - Se agregaron mensajes de consola para depuración (console.log y console.error).
#    - Motivo: Ayudar a depurar y asegurar que el número de libros se muestre correctamente en el panel de administrador.
# ============================================= 

# Cambio realizado el 2024-07-05:
# Se dejó de mostrar los libros provenientes de initialData (allBooks) en HomePage y BookPages.
# Ahora, si no hay libros disponibles, se muestra el mensaje: "No hay libros disponibles" en ambas páginas.
# Esto prepara el sistema para mostrar solo los libros que provengan de la base de datos en el futuro. 

# Proceso de resolución y depuración del filtro en TesisPages (2024-07-05)
#
# 1. Problema inicial: El filtro de TesisPages no funcionaba correctamente, mostraba todos los libros sin importar el filtro seleccionado.
# 2. Se revisó el filtrado y se comprobó que la comparación se hacía entre el valor del checkbox y el campo type de los libros, usando una función normalize.
# 3. Se detectó que la función normalize eliminaba más caracteres de los necesarios (espacios, números, etc.), lo que hacía que todos los valores normalizados coincidieran y el filtro siempre diera true.
# 4. Se agregaron logs para depurar: se imprimieron los valores de selectedSpecialities, los tipos de los libros y el resultado de la comparación para cada libro.
# 5. Se comprobó que la comparación daba true para todos los libros, incluso cuando solo se seleccionaba "Tesis".
# 6. Solución: Se corrigió la función normalize para que solo elimine tildes usando el regex /[\u0300-\u036f]/g y no elimine espacios ni otros caracteres importantes.
# 7. Resultado: Ahora el filtro funciona correctamente, mostrando solo los libros cuyo type coincide (ignorando tildes y mayúsculas) con el filtro seleccionado.
#
# Este proceso incluyó pruebas, logs de depuración y ajuste fino de la función de normalización para lograr un filtrado robusto y preciso en TesisPages. 

# =============================================
# Proceso detallado de resolución y depuración del filtro en TesisPages (2024-07-05)
#
# 1. Se detectó que el filtro de TesisPages no funcionaba correctamente: al seleccionar un filtro (por ejemplo, "Tesis"), seguían mostrándose libros de otros tipos como "Pasantias" y "Servicio Comunitario".
#
# 2. Se revisó el código y se comprobó que el filtrado se hacía así:
#    filteredBooks = filteredBooks.filter(book =>
#      selectedSpecialities.some(sel =>
#        book.type && normalize(sel) === normalize(book.type)
#      )
#    );
#    Donde normalize era una función que eliminaba tildes y otros caracteres.
#
# 3. Explicación del algoritmo anterior:
#    - selectedSpecialities es un array con los valores seleccionados en los checkboxes (por ejemplo, ["Tesis"]).
#    - Para cada libro, se compara el valor normalizado del filtro (sel) con el valor normalizado del campo type del libro.
#    - Si coincide, el libro se mantiene en el arreglo filtrado.
#    - El problema era que la función normalize eliminaba demasiados caracteres, haciendo que todos los valores coincidieran.
#
# 4. Ejemplo de la función normalize incorrecta:
#    function normalize(str: string) {
#      return (str || '')
#        .toLowerCase()
#        .normalize('NFD')
#        .replace(/[ 0-\u036f]/g, '') // INCORRECTO: elimina espacios, números y todos los caracteres Unicode hasta \u036f
#        .trim();
#    }
#    - Esto hacía que "Tesis", "Pasantias" y "Servicio Comunitario" se normalizaran a la misma cadena vacía o similar, por lo que la comparación siempre daba true.
#
# 5. Logs de depuración:
#    - Se imprimió selectedSpecialities para ver qué filtros estaban activos.
#    - Se imprimió Book types para ver los tipos de los libros antes de filtrar.
#    - Se imprimió la comparación real dentro del filtro:
#      filteredBooks = filteredBooks.filter(book => {
#        const result = selectedSpecialities.some(sel =>
#          book.type && normalize(sel) === normalize(book.type)
#        );
#        console.log(
#          `Comparando: filtro "${selectedSpecialities[0]}" con libro "${book.title}" (type: "${book.type}") =>`,
#          result
#        );
#        return result;
#      });
#    - Esto permitió ver que la comparación daba true para todos los libros, sin importar el filtro.
#
# 6. Solución: Se corrigió la función normalize para que solo elimine tildes:
#    function normalize(str: string) {
#      return (str || '')
#        .toLowerCase()
#        .normalize('NFD')
#        .replace(/[\u0300-\u036f]/g, '') // CORRECTO: solo elimina tildes
#        .trim();
#    }
#    - Ahora, "Tesis" se normaliza a "tesis", "Pasantias" a "pasantias", etc., y la comparación es precisa.
#
# 7. Algoritmo final correcto:
#    filteredBooks = filteredBooks.filter(book =>
#      selectedSpecialities.some(sel =>
#        book.type && normalize(sel) === normalize(book.type)
#      )
#    );
#    - Esto asegura que solo los libros cuyo type coincide exactamente (ignorando tildes y mayúsculas) con el filtro seleccionado se muestren.
#
# 8. Se documentó todo el proceso, incluyendo hipótesis, pruebas, logs, errores encontrados y la solución final, para futuras referencias y para evitar errores similares en otros filtros.
# ============================================= 

// [IA] Cambios para implementar un buscador funcional en el Navbar:
// 1. Agregar estado para mostrar/ocultar el input de búsqueda y para el valor del texto.
// 2. Al hacer clic en el ícono de búsqueda, mostrar un input de texto.
// 3. Permitir buscar libros por título (puede expandirse a autores, etc.).
// 4. Al presionar Enter o hacer clic en un botón, redirigir a la página de libros con el filtro aplicado (por ahora, solo mostrar el input y capturar el texto).
// 5. Documentar que la lógica de filtrado/redirección se puede mejorar en el futuro.
// 6. Todo el contenido de este archivo está comentado para evitar errores en la ejecución. 

// [IA] BookPages.tsx actualmente NO filtra los libros por el parámetro de búsqueda de la URL (?search=).
// Se va a agregar la lógica para leer el parámetro 'search' y filtrar los libros por título (y opcionalmente autor) de forma insensible a mayúsculas y tildes. 

// [IA] Se detectó el error 'Rendered more hooks than during the previous render' en Navbar.tsx.
// Causa: El return condicional por 'loading' estaba antes de la declaración de algunos hooks (useCallback, useEffect).
// Solución: Todos los hooks deben declararse antes de cualquier return condicional. Se reordenó el código para cumplir esta regla. 

// [IA] Nuevo requerimiento: El buscador debe funcionar en todas las páginas y mostrar resultados de todos los libros, sin importar si son físicos, virtuales o tesis.
// Al seleccionar una sugerencia, debe llevar a la página correspondiente (libros o tesis) según el tipo del libro.
// Si el libro es de tipo 'Tesis', debe redirigir a /tesis?search=...; si es 'Físico' o 'Virtual', a /libros?search=... 

// [IA] Ajuste: Al seleccionar un libro de tipo 'Tesis', 'Pasantía', 'Pasantias' o 'Servicio Comunitario', el buscador debe redirigir a /tesis?search=... y no a /libros.
// Solo los libros de tipo 'Físico' o 'Virtual' deben ir a /libros?search=... 

// [IA] Ajuste: El buscador debe filtrar dinámicamente las sugerencias y solo mostrar los libros que coincidan exactamente o parcialmente con el texto actual, ocultando los que ya no coinciden a medida que el usuario escribe. 

// [IA] Mejora visual: Se agregará una animación de aparición/desaparición suave al input del buscador y al dropdown de sugerencias para que no desaparezcan de forma abrupta.
// Se usará framer-motion para transiciones suaves. 

// [IA] Se agregará la opción de eliminar y editar libros en el admin:
// - Eliminar: botón para borrar un libro desde la interfaz.
// - Editar: botón para abrir un formulario con los datos actuales del libro, permitiendo modificar cualquier campo y guardar los cambios en la base de datos. 

// [IA] Se agregará al formulario de agregar libro un input para subir archivos PDF (y otros), que se subirá a Supabase Storage y se guardará la URL pública en la base de datos (campo url_pdf). 

// [2024-06-09] Brands.tsx: Ahora cada ícono de carrera es un enlace (Link de react-router-dom) que redirige a /libros?carrera=NombreCarrera al hacer click. Esto permitirá filtrar los libros por carrera en la página de libros. 

// [2024-06-09] BookPages.tsx: Ahora, si existe el parámetro 'carrera' en la URL (por ejemplo, /libros?carrera=Ingenieria De Sistemas), la página filtra automáticamente los libros para mostrar solo los de esa carrera. 

// [2024-06-09] BookPages.tsx: Ahora, al llegar desde Brands, se marca el checkbox de la carrera seleccionada automáticamente. Si el usuario desmarca el checkbox, se muestran todos los libros. Si el usuario interactúa con los filtros, la selección automática ya no se aplica hasta recargar o cambiar de URL.
// [2024-06-09] BookPages.tsx: Ahora, si llegas desde Brands con una carrera que no está en la lista de filtros, se agrega temporalmente para que el checkbox se marque aunque no haya libros de esa carrera.

// [2024-06-09] BookPages.tsx: Ahora, si el libro tiene fileUrl (PDF), se muestra una vista previa del PDF en un iframe dentro del modal de detalles.

// [2024-06-09] BookPages.tsx: Ahora el visor PDF solo aparece cuando el usuario presiona el botón 'Visualizar libro' en el modal de detalles. Al abrir el modal, el visor está oculto por defecto.

// [2024-06-09] TesisPages.tsx: Ahora el visor PDF solo aparece cuando el usuario presiona el botón 'Visualizar archivo' en el modal de detalles. Al abrir el modal, el visor está oculto por defecto, igual que en BookPages.

// [2024-06-09] BookPages.tsx y TesisPages.tsx: El modal de visualización de PDF ahora es más grande (ancho y alto). Solo se abre al presionar 'Visualizar' o 'Visualizar archivo', no al hacer click en la tarjeta. Las acciones están debajo de los datos del libro.

// [2024-06-09] BookPages.tsx y TesisPages.tsx: Ahora la visualización de PDF usa react-pdf con navegación por páginas (flechas) y sin controles de zoom, imprimir ni descargar. El visor ocupa un área amplia y solo muestra la página actual.

// [2024-06-09] BookPages.tsx y TesisPages.tsx: El modal de PDF ahora es más pequeño (max-w-md, h-60vh), solo muestra el visor y un botón X, y se puede cerrar haciendo click fuera del modal.

---
Fecha: 2025-07-23

Cambios realizados hasta el momento:

- Análisis y sugerencias para el área de administrador.
- Solución de problemas con políticas RLS en Supabase (libros, libros_virtuales, proyecto_investigacion, libros_fisicos).
- Corrección de la lógica para guardar PDFs solo en libros_virtuales.
- Corrección de la lógica para guardar autores y especialidades.
- Mejoras visuales en el formulario de libros (selects, checkboxes, campos condicionales).
- Implementación de select de tutores y carga dinámica desde la base de datos.
- Implementación de campos condicionales para Tesis y Proyecto de Investigación.
- Corrección de filtros y visualización de proyectos de investigación.
- Corrección de acentos y ortografía en textos de la página principal y componentes.
- Actualización de la paleta de colores en Tailwind y pruebas de aplicación en navbar, footer y tarjetas.
- Mejoras visuales en el logo (inclusión de imagen, colores en versión móvil).
- Mejoras y reversiones en el footer (eliminación de enlaces, iconos de redes sociales, fondo de color).
- Implementación y reversión de fondos de pantalla en login, registro y banner.
- Cambios y reversiones en bordes y colores de tarjetas de libros.
- Ajustes en la visualización de la sinopsis y fragmentos en los modales de detalles.
- Cambios en la navegación y comportamiento de enlaces activos y hover.
- Todas las reversiones solicitadas para dejar la interfaz y lógica como el usuario lo pidió. 

// [2024-06-09] BookPages.tsx: Ahora se muestran todos los libros excepto los de tipo Tesis, Servicio Comunitario y Pasantía(s), en vez de solo Físico o Virtual. 

// [2024-06-09] BookPages.tsx: Ahora tampoco se muestran los libros de tipo Proyecto de Investigacion (además de Tesis, Servicio Comunitario y Pasantía(s)). 

// [2024-06-09] CardBook.tsx: Ahora las opciones de 'Visualizar' (si hay PDF) y 'Reservar' (si es físico) están debajo de los datos del libro. Se eliminó el botón de 'ver detalles'. Al presionar 'Visualizar', el padre debe mostrar el PDF en un modal amplio. 

// [2024-06-09] bookService.ts: Ahora fileUrl siempre será la URL pública completa del PDF en Supabase Storage, construyéndola si solo se tiene la ruta interna. Esto asegura que los PDFs se puedan visualizar correctamente en el visor. 